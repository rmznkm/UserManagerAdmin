using Moq;
using StructureMap.AutoMocking.Moq;

namespace UserManagerAdmin.TestHelper
{
    public class TestsFor<TInstance> : IDisposable where TInstance : class
    {
        protected TInstance Instance { get; private set; }
        protected MoqAutoMocker<TInstance> AutoMocker { get; private set; }

        public TestsFor()
        {
            AutoMocker = new MoqAutoMocker<TInstance>();

            BeforeInstanceCreated();

            Instance = AutoMocker.ClassUnderTest;

            AfterInstanceCreated();
        }

        /// <summary>
        /// Override this method to execute code before the Instance of the class under test is created. 
        /// </summary>
        public virtual void BeforeInstanceCreated()
        {
            // No implementation here
        }

        /// <summary>
        /// Override this method to execute code after the instance of the class under test is created
        /// </summary>
        public virtual void AfterInstanceCreated()
        {
            // No Implementation here
        }

        /// <summary>
        /// Use this method to inject specific instances of a TContract into the automocker. 
        /// </summary>
        /// <typeparam name="TContract">The type for which you need to replace the automatically generated mock</typeparam>
        /// <param name="with">The concrete instance you want to replace the TContract with</param>
        public void Inject<TContract>(TContract with) where TContract : class
        {
            AutoMocker.Inject<TContract>(with);
        }

        /// <summary>
        /// Returns the stub generated by the mock for the given contract
        /// </summary>
        /// <typeparam name="TContract">The contract (interface) for which you want the instance</typeparam>
        /// <returns>The stub (object) instance of the TContract</returns>
        public TContract InstanceOf<TContract>() where TContract : class
        {
            return AutoMocker.Get<TContract>();
        }

        /// <summary>
        /// Returns the mock that owns the instance of TContract, in order to do preparation or verification
        /// </summary>
        /// <typeparam name="TContract">The type of dependency that you need to get</typeparam>
        /// <returns>The mock that generated the instance of TContract</returns>
        public Mock<TContract> GetMockFor<TContract>() where TContract : class
        {
            return Mock.Get(AutoMocker.Get<TContract>());
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                var disposableInstance = Instance as IDisposable;
                if (disposableInstance != null)
                {
                    disposableInstance.Dispose();
                }
                AutoMocker.Container.Dispose();
            }
        }
    }
}